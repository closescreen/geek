#!/usr/bin/env bash

#> Making table "bids" (tn3).
#>> For ssp.
#>> in (from tn3 total.gz):
#>>  1   2      3   4  5  6        7       8   9   10    11      12 
#>> uid second sid  sz pz bt exposureprice ad dom path sestart isview


scasca "$0" -main=app -between="#SCALA_BEGIN and #SCALA_END" -desti=./targets/14_process_ssp.jar -cp ./sjlibs/adriver.rd.jar |
 sort -T. -t\* -S 333M -n -k1,1 -k2,2

exit
#SCALA_BEGIN

import scala.io._
import collection.mutable.Map
import adriver.rd.util.fastSplit


object app extends App {
  var m = Map[String, Map[String,Int]]()
  var d = Map[String,String]()
      
 for ( ln <- Source.stdin.getLines() ){
  // val fi: Array[String] = ln.split('*')
  val fi = fastSplit.split(ln, '*');
  
  // input ( google 3 total ) format:
  //  0    1     2   3  4  5       6        7  8   9     10      11  
  // uid second sid sz pz bt exposureprice ad dom path sestart isview
  val sid_sz = fi.get(2)+"*"+fi.get(3)
  val ad = fi.get(7)
  var l2 = m.getOrElse( sid_sz, Map[String,Int]() )
  var cnt = l2.getOrElse(ad, 0)
  cnt = cnt+1
  l2 += ( ad -> cnt )
  m.getOrElseUpdate(sid_sz, l2 )
  val dom = fi.get(7)
  d.getOrElseUpdate(sid_sz, dom)
 }
 
 // println(m)
 //println(d)
 
 m.foreach{ 
    case (sid_sz, m1) => m1.foreach{ 
	case (ad, cnt) => println(sid_sz+'*'+ad+'*'+cnt+'*'+d.getOrElse(sz, "NA")) 
    } 
 }

}
    	                                                         
#SCALA_END

#>> OUT: sid, sz, ad, bids, domain.
#>> 
#>> | field  | description |
#>> | ------ | ----------- |
#>> | sid    |
#>> | sz     |
#>> | ad     |
#>> | bids   | количество бидов |
#>> | domain | домен (как внешний ключ для объединения с данными, сгруппированными по доменам ) |
#>>     Прим. 
#>>      Поле "количество бидов при exposureprice>0" (posibids) отсутствует, потому что
#>>      оно равно значению поля bids, за исключением случаев, когда ad=0. В этом случае оно равно 0.

