#!/usr/bin/env bash
#> uidsz [за 30 дней] + traits_copy/.. ------(33_process)--------->sz_traits_30days.gz 
(
set -u
set +x
set -o pipefail
cd `dirname $0`

merge_days=30 # Отладка. потом поставить =30 ( за сколько дней хотим мержить uidsz.gz )
job=${1:?Job!} # google | ssp_sites | net_sites
days=${2:-""} # можно указать "$day1 $day2 ..."
deb=${3:-""} # можно указать "deb"
report_deep=`conf 00_conf.txt report_deep`

traits_base_dir="../RESULT/traits_copy"
uids_base_dir="../RESULT/10"

[[ -n "$deb" ]] && set -x

processor=$(
 href -dict="
    net_sites => './33_process_net_sites',
    google => './33_process_google',
    ssp_sites => './33_process_ssp_sites',
 " -val="$job"
) 
[[ -z "$processor" ]] && exit 1

typenum=$(
 href -dict="
     net_sites => 0,
     google => 3,
     ssp_sites => 3,
 " -val="$job"
)
[[ -z "$typenum" ]] && exit 0

if [[ -n "$days" ]]; then
    ff=`echo "$days" | files "../RESULT/10/%F/$job/$typenum/uidsz.gz" | only -s`
else
    ff=`find $uids_base_dir/ -wholename "*/$job/$typenum/uidsz.gz" | sort -r | only -upto="$report_deep" | only -without="sz_traits_30days.gz"`
    [[ -n "$ff" ]] && days=`echo $ff | fn2days`
fi

chk "$ff" "uidsz files upto $report_deep days. " || exit 2

# ... для каждого из которых существует 30 файлов (за 30 соответствующих дней) включая его самого где он последний,
ff=`echo "$ff" | 
only 'fn2days "%f" | hours -n=-'$merge_days'days -shift=1day -days | files '$uids_base_dir/%F/$job/$typenum/uidsz.gz' | only -all -e -noprint'`
chk "$ff" "uidsz files with $merge_days days for merge. " || exit 2

# а так же для каждого файла uidsz должны иметься predict_gr_v2.gz
ff=`echo "$ff" | 
only --having='m|(\d\d\d\d-\d\d-\d\d)|; $_="../RESULT/traits_copy/$1/predict_gr_v2.gz"'`
chk "$ff" "uidsz files with predict_gr_v2.gz " || exit 2

# ... и predicted_add.gz  
ff=`echo "$ff" | 
only --having='m|(\d\d\d\d-\d\d-\d\d)|; $_="../RESULT/traits_copy/$1/predicted_add.gz"'`
chk "$ff" "uidsz files with predicted_add.gz " || exit 2

# ... и ctr10gr.gz
ff=`echo "$ff" | 
only --having='m|(\d\d\d\d-\d\d-\d\d)|; $_="../RESULT/traits_copy/$1/ctr10gr.gz"'`
chk "$ff" "uidsz files with ctr10gr.gz " || exit 2

# ... и ctr11gr.gz
ff=`echo "$ff" | 
only --having='m|(\d\d\d\d-\d\d-\d\d)|; $_="../RESULT/traits_copy/$1/ctr11gr.gz"'`
chk "$ff" "uidsz files with ctr11gr.gz " || exit 2

# ... и auditory.gz
ff=`echo "$ff" | 
only --having='m|(\d\d\d\d-\d\d-\d\d)|; $_="../RESULT/traits_copy/$1/auditory.gz"'`
chk "$ff" "uidsz files with auditory.gz " || exit 2

# filtered_traits (buyers)
ff=`echo "$ff" | 
only --having='m|(\d\d\d\d-\d\d-\d\d)|; $_="../RESULT/traits_copy/$1/filtered_traits.txt.gz"'`
chk "$ff" "buyers file filtered_traits.txt.gz " || exit 2

# DEBUG: (get first file from list):
# ff=`echo $ff | words -first` # закомментировать потом
# chk "$ff" "files. " || exit 2

maxf=`conf 00_conf.txt maxf`
echo "$ff" | washing  -res="s|uidsz\.gz|sz_traits_30days.gz|" -v_flag="$processor %s %f '$job' '$typenum' '$merge_days' '$traits_base_dir' '$uids_base_dir'" \
 -comp=gzip -time=00_all.time.log -maxf="$maxf"

)>>"$0.log" 2>&1
