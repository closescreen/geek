#!/usr/bin/env bash
#> Для net.
#> пересечение uidsz.gz за 30 дней с файлами трейтов predict_add.gz, predict_gr_v2.gz, ctr10gr.gz, ctr11gr.gz
#> v2, надеемся на ускорение.

#>> gender (predict_add.gz): 
#>> format: 1480566*11
#>>  11 - 2.54 муж
#>>  12 - 2.55 жен

#>> age (predict_gr_v2.gz):
#>> format: 10000022992*1
#>>  1 - 2.56 young (12-24)
#>>  2 - 2.57 adult (25-44)
#>>  3 - 2.60 old (45+) 

#>> ctr: (ctr10gr.gz )
#>> format: 25777293644*29926*0.3*1.00247e-05*10 (see field 5)
#>> 1 - most active
#>> 10 - minumum activity 

# теперь нет:
#>> ctr11gr.gz
#>> format: 10039181520*1*0*0*0
#> all cookies in 1-st field - in 11 group (inactive )

#>> auditory.gz
#>> format:
#>> uid * group
#>> sorted: 1,1n

#>> filtered_traits.txt.gz
#>> format:
#>> uid \t	trait	... (other fields)


set -u
set +x
set -o pipefail

# Параметр 1: имя текущего uidsz.gz
srcfile=${1:?File!} # ../REESULT/.../uidsz.gz
# Параметр 2: имя результирующего файла:
resf=${2:? ResFile! }
# Параметр 3: job (напр. google)
job=${3:?Job!} # google
# парам 4: typenum:
typenum=${4:?typenum!}
# Параметр 5: глубина дней, за сколько мержить uidsz
merge_deep=${5:?Merge Deep!} # в днях (30), за сколько дней нужны uidsz.gz
# Параметр 6: основная папка файлов трейтов. 
traits_base_dir=${6:? traits base dir!}
# Параметр 7: uids_base_dir
uids_base_dir=${7:? uids_base_dir !}


day=`fn2days "$srcfile"`

gender_file="$traits_base_dir/$day/predicted_add.gz"
chk "$gender_file" "gender file" "-s" "exists" nop || exit 2

age_file="$traits_base_dir/$day/predict_gr_v2.gz"
chk "$age_file" "age file" "-s" "exists" nop || exit 2

ctr10_file="$traits_base_dir/$day/ctr10gr.gz"
chk "$ctr10_file" "ctr10file" "-s" "exists" nop || exit 2

#ctr11_file="$traits_base_dir/$day/ctr11gr.gz"
#chk "$ctr11_file" "ctr11file" "-s" "exists" nop || exit 2

auditory_file="$traits_base_dir/$day/auditory.gz"
chk "$auditory_file" "auditory_file" "-s" "exists" nop || exit 2

buyers_file="$traits_base_dir/$day/filtered_traits.txt.gz"
chk "$buyers_file" "buyers_file" "-s" "exists" nop || exit 2


uidsz30files=`hours -d="$day" -shift=1day -n=-"$merge_deep"days -days | files "$uids_base_dir/%F/$job/$typenum/uidsz.gz"`

# должны быть все на месте:
uidsz30files=`echo "$uidsz30files" | only -all -s`
chk "$uidsz30files" "30 uidsz.gz files for merge, не хватает: $? файлов" || exit 2 

#>> мержит все uidsz за 30 дней, уникалит и подает на вход скриту

#<(zcat $ctr11_file | cut -d* -f1 | sort -T. -S333M -k1,1n | awk -v"OFS=*" '{print $0,11,"ctr"}') \

sort -m -k1,1n \
<(mergef -ff="$uidsz30files" -m -k=1,1n -k=2,2n -k=3,3n -postfilter="uniq | awk -F* -v'OFS=*' '{print \$1,\$2\"+\"\$3,\"sz\"}'" -stdout ) \
<(zcat $gender_file | awk -v"OFS=*" '{print $0,"gender"}') \
<(zcat $age_file | sort -T. -t\* -S333M -k1,1n | awk -v"OFS=*" '{print $0,"age"}' ) \
<(zcat $ctr10_file | cut -d* -f1,5 | sort -T. -t\* -S333M -k1,1n | awk -v"OFS=*" '{print $0,"ctr"}') \
<(zcat $auditory_file | awk -F* -v"OFS=*" '{print $0,"auditory"}' ) \
<(zcat $buyers_file | awk -F"\t" -v"OFS=*" '$2==184549376 {print $1,$2,"buyer"}') | sort -t\* -n -k1,1 | # интересует только трейт 184549376 (11.0)
perl -Mstrict -Mwarnings -MData::Dumper -e'
# uid * value * type
# 5*02*auditory
# 5*198913+0*sz
# 5*1*age
# 66*12*gender
# 66*153488+0*sz
# 66*167485+0*sz
# 66*198925+0*sz
# 66*2*age
# 138*11*ctr
# 138*200294+0*sz

# распределение значений и их типов по колонкам отчета, начиная с нулевой.
my %ind = (
 all_uids => 0, # all uids counter
 gender => { 
    11=>1, #male 
    12=>2 ,#female
 },
 age => {
    1=>3, # young
    2=>4, # adult
    3=>5, # old
 },
 ctr => {
    1=>6, # max activity
    2=>7,
    3=>8,
    4=>9,
    5=>10,
    6=>11,
    7=>12,
    8=>13,
    9=>14,
    10=>15, # min activity
    11=>16, # inactive
 },
);

# номера полей и их количество для "аудиторий":
my $start_i = 17;
for ( 1..29 ){
 $ind{ auditory }{ $_ } = $start_i++;
}

# в бывшей 30-й аудиторной колонке:
$ind{ buyer }{ 184549376 } = $start_i++; # интересует пока только один трейт


# замыкает - trash:
$ind{ trash } = $start_i; # unknown traits or values

my $uid=0; 
my @uid_sidsz; 
my %traits;
my %sidsz;
my @auditories;
my @buyer_traits;

$\="\n";
$,="*";

sub break_uid(){
 for my $sidsz ( @uid_sidsz ){
    $sidsz{ $sidsz }[ $ind{ all_uids } ]++;
    for my $type ( keys %traits ){
	my $value = $traits{ $type };
	$sidsz{ $sidsz }[ $ind{ $type }{ $value } || $ind{ trash } ]++;
    }
    
    for my $au_number ( @auditories ){
	$sidsz{ $sidsz }[ $ind{ auditory }{ $au_number } ]++;
    }

    for my $buy_trait ( @buyer_traits ){
	$sidsz{ $sidsz }[ $ind{ buyer }{ $buy_trait } ]++;
    }

 }
 undef @uid_sidsz;
 undef %traits; 
 undef @auditories;
 undef @buyer_traits;
}

while(<>){
 chomp;
 my ($new_uid, $new_value, $new_type) = split /\*/;
 break_uid() if $new_uid != $uid;

 $uid = $new_uid;
 if ( $new_type eq "sz" ){ push @uid_sidsz, $new_value }
 elsif( $new_type eq "auditory" ){ push @auditories, $new_value }
 elsif( $new_type eq "buyer" ){ push @buyer_traits, $new_value }
 else{ $traits{ $new_type } = $new_value }
};
break_uid();


for my $sid_sz ( sort keys %sidsz ){
    $sidsz{ $sid_sz }[ $ind{ trash } ]||=0; # чтобы пропечатать все колонки, даже пустые.
    my ($sid, $sz) = split /\+/, $sid_sz; # <-- sid+sz хранится в виде строки 123+345
    print map {$_||0} $sid, $sz, @{ $sidsz{ $sid_sz } };
}

#>> OUT:
#>> sid *  sz * all * male * fem * age1 * age2 * age3 * ctr1 *  ... ctr11 * auditory01 *  ... auditory29 * buyer * trash
#>>   1     2     3     4     5      6      7      8     9            19        20                 48        49     50  
' | sort -T. -t\* -n -k1,1 -k2,2
 


