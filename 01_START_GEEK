#!/usr/bin/env bash
#> Запуск всех скриптов.

export PATH=$PATH:/usr/local/rle/var/bike
export PERL5LIB=/home/d.belyaev/perl5/lib/perl5:/usr/local/rle/lib/perl5/
export PATH=$PATH:/usr/local/rle/bin
export SCALA_HOME=$HOME/scala-2.11.2
export PATH=$SCALA_HOME/bin:$PATH

(
set -u
set +x
set -o pipefail
cd `dirname $0`

[[ -s 01_STOP_ALL.stop ]] && echo "01_STOP_ALL.stop found! Remove it and try again.">&2 && exit 1

# запуск только при низком loadaverage или при "force"
lo="5"

#--- usage: exit_if_loadaverage_gt 5 ----
exit_if_loadaverage_gt () {
 n=${1:?"loadaverage!"}
 loadaverage -1m -gt $n && echo "$(date +"%F %H:%M") loadaverage too big ($(loadaverage -1m))">&2 && exit
}

exit_if_loadaverage_gt $lo
echo "Started at $(date +"%F %H:%M")" >&2 # debug for view log

./93_LOGS_TAIL 

#--------------------- ежедневные -------------------------
days=$(hours -d=today -n=-4days -days) # <--- стараемся успеть за N дня
target_dates=$days
proc=5 # count of parallel processes at time

echo "Loop 1 for $target_dates"

for job in net google ssp; do
    ./96_REMOVE_OLD_ALL;
    ./95_REMOVE_EMPTY $job;
    ./95_REMOVE_OLD_HOURS $job;
    ./95_REMOVE_OLD_urls30days $job;
done

for target_date in $target_dates; do
    jobs_start_time=`date +%s`

    for job in net google ssp; do
	tn=`href -dict="net=>0, google=>3, ssp=>3" -val=$job`

	# не запускать, когда с памятью совсем плохо.
	# Это общее ограничение. Скрипты же требовательные к памяти ограничиваются в заданиях geek)
	wantmem=3 # Gigabytes
	freemem -lt $wantmem -ed g && echo "Low free memory < $wantmem G">&2 && continue

	# ----
	exit_if_loadaverage_gt $lo

	target=../RESULT/10/$target_date/$job/$tn/url_cat_diff.gz
	cmd="nice ./00_geek4 --want=$target"
	fork -pf=../pids/common.pids -dela=10 -ed=s -n=$proc "$cmd" -wait

	#----- отключено на время ремонта
	target=../RESULT/10/$target_date/$job/$tn/url_cat_diff.sent

	echo "$(date +"%F %H:%M") * target:$target * $(./00_geek4 -want $target -desc -norun -avg | tail -n1)">>./00_need_time.log

	exit_if_loadaverage_gt $lo

	cmd="nice ./00_geek4 --want=$target"
	fork -pf=../pids/common.pids -dela=10 -ed=s -n=$proc "$cmd" -wait

	# ===== только для ssp/3 ====
	if [[ "$job" == "ssp" ]]; then
	    if [[ "$tn" == "3" ]]; then
		# ==== toolbar ====
		exit_if_loadaverage_gt $lo
		target=../RESULT/10/$target_date/$job/$tn/toolbar_trait.sent-v # варианты суффикса: "-v" - засылать многословно, "-v-n" - не засылать, многословно
		cmd="nice ./00_geek4  --want=$target"
		fork -pf=../pids/common.pids -dela=10 -ed=s -n=$proc "$cmd" -wait
	    fi	
	fi


    done
    jobs_stop_time=`date +%s`
    jobs_time=$(( $jobs_stop_time - $jobs_start_time ))
    if [[ $jobs_time -gt $(( $proc*300 )) ]]; then
	# время выполнения заняло больше 2-х минут, значит - было что считать, значит новую дату считать не будем
	echo "time $(($jobs_stop_time - $jobs_start_time)), break">&2
	break
    fi
done    


# ------------- считаем на даты - понедельники ---------------------:
# кластеризация:
days=$(hours -d=today -shift=7days -n=-15days -days) # <--- неделю вперед (готовимся к будущему) + ~~недел назад

days=`perl -M"Date::Calc qw(Day_of_Week_Abbreviation Day_of_Week)" -e'$,=" "; print grep {Day_of_Week_Abbreviation(Day_of_Week(split /\-/, $_)) eq "Mon" } @ARGV' $days`
target_dates=$days
#proc=4 # count of parallel processes at time

echo "Loop 2 for $target_dates"

for job in net google ssp; do
    ./96_REMOVE_OLD_ALL;
    ./95_REMOVE_EMPTY $job;
    ./95_REMOVE_OLD_HOURS $job;
    ./95_REMOVE_OLD_urls30days $job;
done

for target_date in $target_dates; do

    jobs_start_time=`date +%s`

    for job in net google ssp; do
	# не запускать, когда с памятью совсем плохо.
	# Это общее ограничение. Скрипты же требовательные к памяти ограничиваются в заданиях geek)
	wantmem=3 # Gigabytes
	freemem -lt $wantmem -ed g && echo "Low free memory < $wantmem G">&2 && continue

	tn=`href -dict="net=>0, google=>3, ssp=>3" -val=$job`

	# --
#	Илья сказал , не требуется:
#	target=../RESULT/10/$target_date/$job/$tn/clust_sz_1.txt 
#	cmd="nice ./00_geek4  --want=$target"
#       exit_if_loadaverage_gt $lo
#	fork -pf=../pids/common.pids -dela=1 -n=$proc "$cmd" -wait

	#--посчитать:
	# (включаю, когда нужно только посчитать а не сетить)
	exit_if_loadaverage_gt $lo
	target=../RESULT/10/$target_date/$job/$tn/sz_vars_30days.gz
	cmd="nice ./00_geek4 --want=$target"
	fork -pf=../pids/common.pids -dela=10 -ed=s -n=$proc "$cmd" -wait

	#--посчитать и засетить:
#	ВРЕМЕННО ОТКЛЮЧЕНО, ДО ПРОВЕРКИ (проверить файлы и включить):
#	if [[ "$job" -eq "net" ]]; then # пока ВКЛ только NET (потом IF убрать):
	    exit_if_loadaverage_gt $lo
	    target=../RESULT/10/$target_date/$job/$tn/sz_vars_conv.sent
	    cmd="nice ./00_geek4 --want=$target"
	    fork -pf=../pids/common.pids -dela=10 -ed=s -n=$proc "$cmd" -wait
#	fi    

	
#	# отключаю, как подзадачу, которая  и так запросится из urlvars_diff.gz
#	target=../RESULT/10/$target_date/$job/$tn/url_vars_30days.gz
#	cmd="nice ./00_geek4 --want=$target"
#	fork -pf=../pids/common.pids -dela=1 -n=$proc "$cmd" -wait

	#----
	# diff явно указываю, потому, что urlvars_diff.sent может не найдя _diff.gz попросить _diff_INIT.gz
	exit_if_loadaverage_gt $lo
	target=../RESULT/10/$target_date/$job/$tn/urlvars_diff.gz 
	cmd="nice ./00_geek4  --want=$target"
	fork -pf=../pids/common.pids -dela=10 -ed=s -n=$proc "$cmd" -wait	
	
	#----
	# ВРЕМЕННО ОТКЛЮЧЕНО до проверки, потом ВКЛЮЧИТЬ:
	exit_if_loadaverage_gt $lo
	target=../RESULT/10/$target_date/$job/$tn/urlvars_diff.sent
	
	echo "$(date +"%F %H:%M") * target:$target * $(./00_geek4 -want $target -desc -norun -avg | tail -n1)">>./00_need_time.log
	
	cmd="nice ./00_geek4  --want=$target"
	fork -pf=../pids/common.pids -dela=10 -ed=s -n=$proc "$cmd" -wait

	# ===== только для ssp/3 ====
	if [[ "$job" == "ssp" ]]; then
	    if [[ "$tn" == "3" ]]; then
		# ==== toolbar ====
		exit_if_loadaverage_gt $lo
		target=../RESULT/10/$target_date/$job/$tn/toolbar_top_7days.gz
		cmd="nice ./00_geek4  --want=$target"
		fork -pf=../pids/common.pids -dela=10 -ed=s -n=$proc "$cmd" -wait
	    fi	
	fi

    done
    
    jobs_stop_time=`date +%s`

    jobs_time=$(( $jobs_stop_time - $jobs_start_time ))
    if [[ $jobs_time -gt $(( $proc*300 )) ]]; then
	# время выполнения заняло больше 5ти минут, значит - было что считать, значит новую дату считать не будем
	break
    fi



done    


)>>"$0.log" 2>&1