#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper;


my $g = Geek->new( );
my %sm = $g->named_groups(
    day => '\d\d\d\d-\d\d-\d\d',
    hour => '\d\d\d\d-\d\d-\d\dT\d\d',
    job => '\w+',
    typenum => '\d+',
);

# 'set -o pipefail; mkdir -p %d && netflag --local --file="%f.FLAG" -cmd=\'' . $via_flag_cmd . '\'' . ( $compress ? " | $compress " : '' ). ' > %f.TMP && mv %f.TMP %f'	

$g->routes(
    { 	target=>"../RESULT/10/$sm{day}/google/3/sz_vars_30days.gz", 
	need=>{ 
	    bids=> sub{
		# в данном случае возвращается arrayref, в котором список строк - значит это список файлов
		$g->days( from=>$+{day}, n=>-3 )->files( "../RESULT/10/\%F/google/3/bids.gz" );
	    },
	    total=>sub{
		$g->days( from=>$+{day}, n=>-3 )->files( "../RESULT/10/\%F/google/0/total.gz" );
	    },
	},
	
	# определенные пользователем переменные - ,желательно, в нижнем регистре, предопределенные - в верхнем.
	cmd => sub{"I return: day:$+{day}, target:$+{TARGET}, targets:$+{TARGETS}, total:'$+{total}', bids:'$+{bids}'"},
	
#	cmd=>sub{
#	    sub{qq{ netflag --local --file='$_[0].FLAG' -cmd='$_[1]' | gzip > '$_[0].TMP' && mv '$_[0].TMP' '$_[0]' }}->(
#		$g->{target_file},
#		qq{ ./51_process_google '@{ $g->{need}{total}}' '@{$g->{need}{bids}}' },
#	    )	
#	},

    },
#    { target=>"../RESULT/10/$sm{day}/google/3/bids.gz",
#	need=>{
#	    total=>sub{ "../RESULT/10/$+{day}/3/total.gz" },
#	},
#    },
);

#die Dumper $g;

my @wanted_files = ( "../RESULT/10/2014-09-15/google/3/sz_vars_30days.gz",
    "../RESULT/10/2014-09-02/google/3/sz_vars_30days.gz", 
    "../RESULT/10/2014-09-02/google/3/bids.gz", 
    );

#my $matched = $g->match( wanted=>\@wanted_files );
#die Dumper $matched;
#my $jobs = $g->jobs( matched=>$matched );
#die Dumper $jobs;

my $jobs = $g->jobs( wanted=>\@wanted_files );
#die Dumper $jobs;

my $result = $g->run( jobs=>$jobs );
die Dumper $result;

$,=", ";
$"=", ";
$\="\n";






#------------ Geek -----------
package Geek;
use Data::Dumper;
use Date::Calc;

sub new{
 my $pkg = shift or die "Package! Usage: Geek->new()";
 my %se = ();
 return bless \%se;
};

sub uniq{
 # give LIST  
 # Return uniqued LIST
 if ( ref $_[0] eq "Geek" ){
    shift;
 }
 my %rv = map {$_,$_} @_;
 return wantarray ? (values %rv) : [values %rv];
}


sub routes{
 my $se = shift;
 ref $se or die "First param must be a reference to Geek object";
 $se->{routes} = \@_;
 
 return $se;
}

sub match{
 my $se = shift;
 ref $se eq "Geek" or die "First param must be a reference to Geek object"; 
 my %pa = @_;
 my $wanted = $pa{ wanted };
 my @matched_routes;
 if ( !$se->{routes} ){ die "routes is empty." }
 my %rv;

 for my $r ( @{ $se->{routes}||[] } ){
    if ( my $re = $r->{target} ){
	for my $wanted_elem ( @$wanted ){
	    if ( $wanted_elem=~$re ){
		if ( my $need = $r->{need} ){
		    if ( ref $need eq "HASH"){
			for my $type ( keys %$need ){
			    my $need_smf = $need->{$type};
			    if (ref $need_smf eq "CODE"){
				my @need_smf = $need_smf->();
				$rv{ $re }{ $wanted_elem }{ need }{ $type } = \@need_smf; 
			    }
			}
		    }
		}
		
		if ( my $cmd = $r->{cmd} ){
		    if ( ref $cmd eq "CODE" ){
			$rv{ $re }{ $wanted_elem }{ cmd } = $cmd;
		    }
		}
	    }
	}
    }
 }

 return wantarray ? %rv : \%rv;
}

sub jobs{
 # gives "wanted"|"matched", returns "jobs"
 my $se = shift or die "SE!";
 ref $se eq "Geek" or die "First param must be a reference to Geek object";
 my %pa = @_;
 
 my $matched;

 if ( $matched = $pa{ matched } ){
    1
 }elsif( my $wanted = $pa{ wanted } ){
    $matched = $se->match( wanted=>$wanted );
 }else{
    die "matched or wanted ?".Dumper(\%pa);
 }

 
  for my $re ( keys %$matched ){
  #print $re;
  my @target = keys %{ $matched->{$re} };
  for my $target_elem ( @target ){
    #print $target_elem;
    my $target = $matched->{$re}{$target_elem};
    my $need;
    if ( $need = $target->{need} ){
	for my $type ( keys %$need ){
	    #print $type;
	    for my $need_smf ( @{ $need->{$type} } ){
		#print $need_smf;
	    }
	}
    }else{
	$need = {};
    }

    if ( my $cmd = $target->{cmd} ){
	if ( ref $cmd eq "CODE" ){
	    #$"=" ";
	    my $re2; my $str2;
	    my %named_groups = ( TARGET=>[$target_elem], TARGETS=>[@target], %$need );
	    for my $name ( keys %named_groups ){
		my $value;
		if ( ref $named_groups{$name} eq "ARRAY" ){
		    $value = join(" ", @{ $named_groups{$name} } );
		}else{
		    $value = $named_groups{$name};
		}
		$re2.="-$name-(?<$name>$value)";
		$str2.="-$name-$value";
	    }
	    my $str1 = "$target_elem$str2";
	    my $re1 = qr/$re$re2/;
	    
	    die "NOT MATCHED $str1 to $re1" if not "$str1"=~$re1;
	    #print "str1=$str1, re1:$re1. CMD RESULT:",$cmd->();
	    #print $cmd->();
	    #print "-----------------------------------";
	    my @job = $cmd->();
	    if ( !@job ){
		die "empty job returned.".Dumper($matched->{$re});
	    }elsif (@job==1){
		$target->{job} = $job[0];
	    }else{
		$target->{job} = \@job;
	    }
	}    
    }
  }
 }
 return $matched;
}

sub run{
 # gives "jobs"|"matched"|"wanted" , returns - "run result"
 my $se = shift or die "SE!";
 ref $se eq "Geek" or die "First param must be a reference to Geek object";
 my %pa = @_;
 
 my $jobs;
 
 if ( $jobs = $pa{ jobs } ){
    1
 }elsif ( my $matched = $pa{ matched } ){
    $jobs = $se->jobs( matched=>$matched );
 }elsif( my $wanted = $pa{ wanted } ){
    $jobs = $se->jobs( wanted=>$wanted );
 }else{
    die "jobs or matched or wanted ?".Dumper(\%pa);
 }
 
 for my $re (keys %$jobs){
    my @target = keys %{ $jobs->{$re} };
    for my $target_elem ( @target ){
	my $target = $jobs->{$re}{ $target_elem };
	if ( my $job = $target->{job} ){
	    warn  "Run $job...\n";
#...STOP	    $se->execute( job=>$job, cover=> $jobs->{$re}|| );
	}
    }
 }
 return $jobs;
}

sub execute{
 my $se = shift or die "SE!";
 ref $se eq "Geek" or die "First param must be a reference to Geek object";
 my %pa = @_;
 my $code =  
}

sub days{
 my $se = shift or die "First param must be a reference to Geek object";
 #ref $se eq "Geek" or die "First param must be a reference to Geek object";
 my %pa = @_;
 my @rv;
 if ($pa{from} and $pa{n}){
    my $n = $pa{n};
    my ($y,$m,$d)=$pa{from}=~/(\d\d\d\d)-(\d\d)-(\d\d)/;
    $y and $m and $d or die "bad parameter from=$pa{from}";
    my @ii = $n>0 ? (0..$n) : ($n..-1);
    for my $i ( @ii ){
	push @rv, [ Date::Calc::Add_Delta_Days($y,$m,$d, $i) ];
    }
 }
 @rv = map {sprintf("%d-%02d-%02d",@$_)} @rv;
 my $days = Geek::Days->new('days');
 $days->days(\@rv);
 return $days;
}


sub named_groups{
 ref shift or die "First param must be a reference to Geek object";
 my %pa = @_;
 my %rv;
 for my $name (keys %pa){
    my $v = $pa{$name};
    #$rv{ $name } = qr/(?<$name>$pa{$name})/; 
    $rv{ $name } = "(?<$name>$pa{$name})"; 
 }
 return wantarray ? %rv : \%rv;
}


#-----------------------------------------------------------------
package Geek::Days;
use base qw|Object::Accessor|;

sub files{
 my $se = shift or die "se!";
 my $tmpl = shift or die "tmpl!";
 my @rv;
 for my $d ( @{ $se->days() } ){
    my $file = $tmpl;
    $file=~s/\%F/$d/g;
    push @rv, $file;
 }
 if (wantarray){
    return @rv;
 }else{
    my $files = Geek::Files->new('files');
    $files->files(\@rv);
    return $files;
 }
}




1;
