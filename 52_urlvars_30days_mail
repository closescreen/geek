#!/usr/bin/env bash
#> скопировано как есть из ssp, после того как там внесены изменения 
#> про expprice по показам.
#> Не проверялось в работе.
(
set -u
set +x
set -o pipefail
cd `dirname $0`

#echo "Скрипт на переделке">&2 
#exit 1

url_total_ff=${1:? url_total files!} # файлы url_total_join.gz за (30) дней, их нужно мержить
# in merged tn3/.../url_total_ff:
#  1    2       3             4               5             6              7
# dom  path   cnt(bids)  sum(expprice3)    cnt(exp)    sum(winprice) sum(expprice0)

url_traits_30days_f=${2:? url_traits_30days file!}
#  1       2         3   4     5      6      7   
# dom   * path     *all*male*female*buyers*trash 
# 101.ru*/?an=music*1771*99*131*27*0

dom_traits_30days_f=${3:? dom_traits_30days file!}

#awk -F* '$3>10' | # остаются только урлы с показами>N, для net cnt - это кол-во показов

LANG=POSIX mergef  -m -ff="$url_total_ff" -k=1,1 -k=2,2 -stdout |
summator -fu="sum,sum,sum,sum,sum" -max-infl=100000 | # после мержа 30 дней суммы по dom+path
summator -fu="sum,sum,sum,sum,sum" | # повторные суммы из-за предыдущего -max-infl
lae -lb="dom path cntbids exppricetn3 cntexp secondpricetn0 exppricetn0" '
# на входе будут строки с суммами по ключу dom + path 

my $N = 10;
my $limit1 = 1_000_000; # после превышения кол-ва урлов в домене будет сброс

# переданные параметры:
my ( $url_traits_f, $dom_traits_f ) = @ARGV;

# трейты по урлам:
my %url_traits; # will like $dom->{$path}{all=>$x0, male=>$x1, fem=>$x2, buyers=>$x3 }
$url_traits_f or die "url_traits file!";
open TRAITS, "$url_traits_f" or die "cant open $url_traits_f: $!";
for my $l (<TRAITS>){
 chomp $l;
 my ( $dom, $path, $all_uids, $male, $female, $buyers ) = split /\*/,$l, -1; 
 $url_traits{ $dom }{ $path } = { a=>$all_uids, m=>$male, f=>$female, b=>$buyers };
 #die Dumper $l, $dom, $path, $all_uids, $male, $female, $buyers;
}

# трейты по доменам:
my  %dom_traits; # will like $dom->{all=>$x0, male=>$x1, fem=>$x2, buyers=>$x3 }
$dom_traits_f or die "dom_traits file!";
open TRAITS, "$dom_traits_f" or die "cant open $dom_traits_f: $!";
for my $l (<TRAITS>){
 chomp $l;
 my ( $dom, $all_uids, $male, $female, $buyers ) = split /\*/,$l, -1; 
 #die Dumper $l, $dom, $all_uids, $male, $female, $buyers;
 $dom_traits{ $dom } = { a=>$all_uids, m=>$male, f=>$female, b=>$buyers };
}


# ( по net - одна строка на урл, но в google,ssp - будут разные tn., поэтому называем переменные "sum_..." )

my ( $dom_expprice3, $dom_expprice0, $dom_winprice, $dom_cnt_exp, $dom_cnt_bids );
my %url;

_{

  if ( not defined Secondpricetn0 ){
    warn "Line $_ - not has 6 fields";
    next;
  }

  my $dom_changed = 1 if (prevDom and (Dom ne prevDom));
  
  if ( $dom_changed ){
    flush();
  }
 
  my ($dom, $path) = ($F[DOM], $F[PATH]);
  
  $url{ $F[DOM] }{ $F[PATH] }{ xp0 } += Exppricetn0; # из бидов, но только для случаев, когда были просмотры
  $url{ $F[DOM] }{ $F[PATH] }{ xp3 } += Exppricetn3; # из всех бидов
  $url{ $F[DOM] }{ $F[PATH] }{ wp } += Secondpricetn0; # из показов
  $url{ $F[DOM] }{ $F[PATH] }{ cx } += Cntexp;
  $url{ $F[DOM] }{ $F[PATH] }{ cb } += Cntbids;
  
  $dom_expprice3 += Exppricetn3; # из всех бидов
  $dom_expprice0 += Exppricetn0; # из бидов для которых были показы
  $dom_winprice += Secondpricetn0; # из показов
  $dom_cnt_exp  += Cntexp;
  $dom_cnt_bids += Cntbids;
  
  if ( keys %{ $url{ $F[DOM] } } > $limit1 and prevPath ne $F[PATH] ){
    #warn "Force flush on domain:$F[DOM], path:$F[PATH]";
    flush(); # от переполнения памяти
  }

} -prev=>"dom,path";

flush();


#----------- flush ---------
sub flush{

 for my $do ( grep {$_} sort keys %url ){
    my ($dom_male, $dom_female, $dom_buyers, $dom_all);
    if ( $dom_traits{ $do } ){
	$dom_male   = $dom_traits{ $do }{ m };
	$dom_female = $dom_traits{ $do }{ f };
	$dom_buyers = $dom_traits{ $do }{ b };
	$dom_all = $dom_traits{ $do }{ a }; # - all uids
    }	

    my $dom_winrate = $dom_cnt_bids ? $dom_cnt_exp / $dom_cnt_bids : 0;

    for my $pa ( grep {$_} sort keys %{ $url{$do} } ){
	my $will_print_line;
	my $smf_expprice3 = $dom_cnt_exp ? int( $dom_expprice3 / $dom_cnt_bids / 100 ) + 1 : "NA";
	my $smf_expprice0 = $dom_cnt_exp ? int( $dom_expprice0 / $dom_cnt_exp / 100 ) + 1 : "NA";
	my $smf_winprice = $dom_cnt_exp ? int( $dom_winprice / $dom_cnt_exp ) + 1 : "NA"; 

	my ( $avg_expprice3, $avg_expprice0, $avg_winprice, $profit, $winrate );
	if ( $url{ $do }{ $pa }{ cx } > $N ){
	    # cx - cnt_exposures
	    # cb - cnt_bids
	    # xp3 - exp_price3 (для всех бидов)
	    # xp0 - exp_price0 (для бидов после кот. были показы)
	    # wp - win_price
	    
	    $avg_expprice3 = int( ($url{ $do }{ $pa }{ xp3 }/100 + $smf_expprice3 * $N)/($url{ $do }{ $pa }{ cb } + $N) ) + 1; # по бидам
	    $avg_expprice0 = int( ($url{ $do }{ $pa }{ xp0 }/100 + $smf_expprice0 * $N)/($url{ $do }{ $pa }{ cx } + $N) ) + 1; 
	    $avg_winprice = int( ($url{ $do }{ $pa }{ wp } + $smf_winprice * $N)/($url{ $do }{ $pa }{ cx } + $N) ) + 1; 
	    $profit = $avg_expprice0 ? int( ($avg_expprice0 - $avg_winprice) / $avg_expprice0 * 100 ) : "NA";
	    $winrate = int(( $url{ $do }{ $pa }{ cx } + $dom_winrate * $N ) / ( $url{ $do }{ $pa }{ cb } + $N ) * 1000); # на 1000 потому что маленькие значения
	    $will_print_line = 1;

	}elsif( $url{ $do }{ $pa }{ cb } > $N ){
	    $avg_expprice0 = "NA";
	    $avg_winprice = "NA";
	    $profit = "NA";
	    $avg_expprice3 = int( ($url{ $do }{ $pa }{ xp3 }/100 + ($smf_expprice3 eq "NA" ? 0 :$smf_expprice3) * $N)/($url{ $do }{ $pa }{ cb } + $N) ) + 1; # по бидам
	    $winrate = int(( $url{ $do }{ $pa }{ cx } + $dom_winrate * $N ) / ( $url{ $do }{ $pa }{ cb } + $N ) * 1000); # на 1000 потому что маленькие значения
	    $will_print_line = 1;

	}else{
	    ( $avg_expprice3, $avg_expprice0, $avg_winprice, $profit, $winrate ) = ("NA", "NA", "NA", "NA", "NA");
	}
 
	
	my ( $url_male, $url_female, $url_buyers, $url_all );
	my ( $male_smf_perc, $female_smf_perc, $buyers_smf_perc ) = (0,0,0);
	if ( $url_traits{ $do } and $url_traits{ $do }{ $pa } ){
	    $url_male   = $url_traits{ $do }{ $pa }{ m };
	    $url_female = $url_traits{ $do }{ $pa }{ f };
	    $url_buyers = $url_traits{ $do }{ $pa }{ b };
	    $url_all = $url_traits{ $do }{ $pa }{ a };
	    $male_smf_perc   = int( ( $url_male   + $dom_male / $dom_all   * $N ) / ( $url_all + $N ) * 100 ); # сглаженное мальчиков на урле в процентах
	    $female_smf_perc = int( ( $url_female + $dom_female / $dom_all * $N ) / ( $url_all + $N ) * 100 ); # девочек
	    $buyers_smf_perc = int( ( $url_buyers + $dom_buyers / $dom_all * $N ) / ( $url_all + $N ) * 100 ); # покупателей
	    $will_print_line = 1;
	}else{
	    ($male_smf_perc, $female_smf_perc, $buyers_smf_perc)  = ("NA","NA","NA");
	}
	
	#my $desc = "url_male=$url_male, url_female=$url_female, url_buyers=$url_buyers, url_all=$url_all, dom_male=$dom_male, dom_female=$dom_female, dom_all=$dom_all";

	my ($flag, $male_part);
	if ( $male_smf_perc eq "NA" ){
	    ($flag, $male_part) = ("NA","NA");
	}elsif( $male_smf_perc==0 and $female_smf_perc==0 ){
	    ($flag, $male_part) = (0, "NA");
	}else{
	    $flag = 1;
	    $male_part = int( $male_smf_perc / ( $male_smf_perc + $female_smf_perc ) * 100 );
	    $will_print_line = 1;
	}

	next if not $will_print_line;
	p $do, $pa, $avg_expprice0, $avg_winprice, $profit, $male_smf_perc, $female_smf_perc, $buyers_smf_perc, $flag, $male_part, $winrate, $avg_expprice3; # , $desc;
 
    }
 }

 $dom_expprice0 = $dom_expprice3 = $dom_winprice = $dom_cnt_exp = $dom_cnt_bids = 0;
 undef %url;
}
' <( zcat "$url_traits_30days_f" ) <( zcat "$dom_traits_30days_f")


# out:
#>  1    2         3               4          5       6       7         8      9     10               11	        12
#> dom  path  avg_expprice0, $avg_winprice, $profit, $male, $female, $buyerss  flag  int(m/(m/f))%  winrate_x1000   avg_expprice3


) 2>>"$0.log" 
