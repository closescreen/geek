#!/usr/bin/env bash
#> Объединение сумм из отдельных: bids.gz, tn0/.../total.gz, tn1/.../total.gz, sessions.gz
#>  в одну таблицу по sz [+ad].
#> за 30 дней
set -u
set +x
set +v
set -o pipefail

#> Этот скрипт только для net_sites.

bids_fn=${1:?src_file!} 
job=${2:?job!}
typenum=${3:?typenum!}
deb=${4:-""}

[[ -n "$deb" ]] && set -x

day=`fn2days "$bids_fn"`
days=`hours -d="$day" -shift=1day -n=-30days -days`

# Биды: для каждой таблицы по 30 дней назад (включая рассчетный), с проверкой существования:
bids_ff=`echo "$days" | files "../RESULT/10/%F/$job/$typenum/bids.gz" | only -all -s`
chk "$bids_ff" "30 файлов bids.gz (не хватает $?)" || exit 3

# показы:
# раньше были total< но они большие, перешел на views. Если total не нужны тогда удалить:
#tn0_total_ff=`echo "$days" | files "../RESULT/10/%F/$job/0/total.gz" | only -all -s`
#chk "$tn0_total_ff" "30 файлов показов (не хватает $?)" || exit 3
views_ff=`echo "$days" | files "../RESULT/10/%F/$job/0/views.gz" | only -all -s`
chk "$views_ff" "30 файлов views (не хватает $?)" || exit 3

tn1_total_ff=`echo "$days" | files "../RESULT/10/%F/$job/1/total.gz" | only -all -s`
chk "$tn1_total_ff" "30 файлов кликов (не хватает $?)" || exit 3

sessions_ff=`echo "$days" | files "../RESULT/10/%F/$job/$typenum/sessions.gz" | only -all -s`
chk "$sessions_ff" "30 файлов sessions.gz (не хватает $?)" || exit 3

pzbt_ff=`echo "$days" | files "../RESULT/10/%F/$job/$typenum/pzbt.gz" | only -all -s`
chk "$pzbt_ff" "30 файлов pzbt.gz (не хватает $?)" || exit 3

# а так же 1 файл traits30days.gz (в нем уже 30 дней)
traits_fn=`echo "$day" | files "../RESULT/10/%F/$job/$typenum/traits30days.gz" | only -all -s`
chk "$traits_fn" "($0, line: $LINENO) traits30days.gz за $day" || exit 3

# Порядок сетей в отчете:
nets="net-forty-three net-forty-four net-forty-five net-sixty"

# порядок pagezones в отчете:
pz_list="1 3"
# порядок bannertypes:
#bt_list="1 17 27 29 36 40 41 49 57 58 63 67 68 99 100" # 15 bannertypes
bt_list="1 2 5 8 12 14 16 17 18 19 20 21 22 25 27 29 31 32 34 36 37 40 41 42 43 49 50 51 52 54 56 57 58 61 63 67 68" # 37 bts

# Чтобы получить количество сетей в которые входит сайтзона, данные возьмем из dom_net (domain*net)
dom_net_ff=$( echo "$days" | files "../RESULT/10/%F/net_sites/0/dom_net.gz" | only -all -s )
chk "$dom_net_ff" "dom_net.gz for 30 days (не хватает: $? файлов)" || exit 3 

# текущий dom_gr:
dom_gr_f=`echo "$day" | files "../RESULT/10/%F/$job/$typenum/dom_gr.txt" | only -all -s`
chk "$dom_gr_f" "1 файл dom_gr ../RESULT/10/%F/$job/$typenum/dom_gr.txt " || exit 3

#> смерженные файлы bids.gz:
#> format net_sites/0/bids: sid, sz, ad, is_posibid, is_network, bids, domain
mergef -ff="$bids_ff" -m -k=1,1n -k=2,2n -k=3,3n -stdout |
 cut -d* -f1,2,4,6,7 | # <----взяли поля: sid, sz, is_posibid, bids, dom
 awk -F* -v"OFS=*" '
# здесь суммируем по sid,sz
# INPUT:
# sid sz is_posibid bids dom
{
 if( ($1!=sid || $2!=sz) && sid ) flush();
 sid=$1;
 sz=$2;
 bids+=$4;
 if ($3) posibids+=$3;
 dom=$5;
}
END{
 flush();
}

function flush(){
 print sid,sz,bids,posibids,dom
 bids=0; posibids=0;
}
# OUT:
# sid, sz, all_bids, positive_bids, dom
# ------------------------------------
' | lae -lb="sid sz bids posibids dom" '
# Объединение входных строк по sid,sz с другими таблицами.

# список сетей:
my $net_list = shift or die "nets!";
my @net_list = grep {$_} split /\s+/, $net_list;

# список интересуемых PZ-он:
my $pz_list = shift or die "ps_list!";
my @pz_list = grep {$_} split /\s+/, $pz_list or die "pz!"; 

# список интересуемых BT-пов:
my $bt_list = shift or die "bt_list!";
my @bt_list = grep {$_} split /\s+/, $bt_list or die "bt!";

my %vars;

# views:
open FILE, shift or die $!;
while(<FILE>){
 chomp;
 my ($sid, $sz, $exposures, $expprice, $winprice, $exp_div_win) = split /\*/, $_, -1; 
 $vars{ $sid }{ $sz } = { exposures => $exposures, winprice => $winprice, expprice => $expprice, exp_div_win=>$exp_div_win };
}

# clicks:
open FILE, shift or die $!;
while(<FILE>){
 chomp;
 my ($sid, $sz, $clicks) = split /\*/, $_, -1;
 $vars{ $sid }{ $sz }{ clicks } = $clicks;
}

# sessions:
my %sessions;
open FILE, shift or die $!;
while(<FILE>){
 chomp;
 my ($dom, $sess_cnt, $views) = split /\*/, $_, -1;
 $sessions{ $dom } = { sessions_count => $sess_cnt, views => $views };
}

# pzbt:
open FILE, shift or die $!;
while(<FILE>){
 chomp;
 my ($sid, $sz, $pzbt_count) = split /\*/, $_, -1;
 $vars{ $sid }{ $sz }{ pzbt_count } = $pzbt_count;
}

my %minimum_by_index = map { $_, 50 } 0..46; # ограничения по умолч. (=50) на мин. количво кук на сайтзоне для полей трейтов
@minimum_by_index{ 0 , 1 } = ( 30, 30 ); # male, female = 30

# traits:
my %traits;
open FILE, shift or die $!;
while(<FILE>){
 #>>@in_traits:        0      1     2      ...                                                                                ...       46
 #>> sid * sz * all * male * fem * age1 * age2 * age3 * ctr1 * ctr2 * ctr3 * ... ctr11 * auditory01 * aud02 * aud03 * ... auditory30 * trash
 #>>  1     2    3      4     5     6      7       8     9       10     18         19        20         21      48           49          50
  
 chomp;
 my ( $sid, $sz, $cnt_on_sid_sz, @in_traits ) = split /\*/;
 next if !$cnt_on_sid_sz;

 $traits{ $sid }{ $sz } = [ $cnt_on_sid_sz ]; # index = 0
 # количество колонок в отчете д.б. постоянно, поэтому оперируем постоянным набором индексов: 
 # последнюю колонку (trash) - не включаем в отчет.
 for my $i ( 0 .. 46 ){
    my $cnt_in_trait = $in_traits[$i]; # кол-во кук в трейте
    push @{ $traits{ $sid }{ $sz } },
	$cnt_on_sz >= $minimum_by_index{ $i } ?
	    sprintf( "%.2f", $cnt_in_trait * 100 / $cnt_on_sz) :
	    "NA";
 }
}


# all nets views:
my %all_net_views;
open FILE, shift or die $!;
while(<FILE>){
 chomp;
 my ($dom, $net) = split /\*/;
 $all_net_views{ $dom }{ $net }||=1;
}
die "Hash all_net_views is empty. Possible file(s) for all nets from 30 days typenum=tn0 is empty?" if !%all_net_views;

# суммы бидов по pz:
my $pz_file = shift or die "pz_file!";
open FILE, $pz_file or die "cant open $pz_file: $!";
my %pz_bids;
while(<FILE>){
 chomp;
 my ($sid, $sz, $pz, $cnt) = split /\*/, $_, -1;
 $pz_bids{ $sid }{ $sz }{ $pz } = $cnt;
}

#суммы бидов по bt:
my $bt_file = shift or die "bt_file!";
open FILE, $bt_file or die "cant open %bt_file: $:";
my %bt_bids;
while(<FILE>){
 chomp;
 my ($sid, $sz, $bt, $cnt) = split /\*/, $_, -1;
 $bt_bids{ $sid }{ $sz }{ $bt } = $cnt;
}

# группы доменов из dom_gr:
my $dom_gr = shift or die "dom_gr file!";
open FILE, $dom_gr or die "cant open $dom_gr: $!";
my %dom_gr;
while(<FILE>){
 chomp;
 my ($dom, $gr) = split /\*/, $_, -1;
 $dom_gr{ $dom } = $gr;
}

$|=1;
_{
 # in:
 # sid, sz, bids, posibids, dom
 
 my $vars_sid_sz = $vars{ $F[SID] }{ $F[SZ] }||{};
 
 my ( $ctr, $avg_winprice, $avg_exp_div_win );
 if ( my $exposures = $vars_sid_sz->{exposures} ){
    if ( $F[BIDS]>=1000 && $vars_sid_sz->{clicks} && $exposures>=100 or $exposures>=1000 ){
	$ctr = sprintf( "%.6f", ($vars_sid_sz->{clicks}||0) / $exposures );
    }else{ 
	$ctr = "NA";
	# DEBUG INFO TO FIELD: $ctr.=" bids:$F[BIDS], clicks:$vars_sid_sz->{clicks}, exposures:$exposures ";
    }	
    if ( $exposures>=50 ){
	$avg_winprice = sprintf( "%.4f", ( $vars_sid_sz->{ winprice }||0 ) / $exposures);
	$avg_exp_div_win = sprintf( "%.4f", $vars_sid_sz->{ exp_div_win } / $exposures );
    }else{
	$avg_winprice = "NA";
	$avg_exp_div_win = "NA";
    }	
 }else{
    $ctr = "NA";
    # DEBUG INFO TO FIELD: $ctr.=" bids:$F[BIDS], clicks:$vars_sid_sz->{clicks}, exposures:$exposures ";
    $avg_winprice = "NA";
    $avg_exp_div_win = "NA";
 }
 
 
 my $traits_sid_sz = $traits{ $F[SID] }{ $F[SZ] }||[];

 my $all_uids = $traits_sid_sz->[0]||"NA";

 my $avg_session = $all_uids >= 30 && $F[BIDS] >= 500 && $sessions{ $F[DOM] } && $sessions{ $F[DOM] }{sessions_count} ?
    sprintf("%.2f" ,($sessions{ $F[DOM] }{views}||0) / $sessions{ $F[DOM] }{sessions_count} ) :
    "NA";
 
 # список сетей, в кот входит сайтзона:
 my @in_nets = $all_net_views{ $F[DOM] } ?
    map { $all_net_views{ $F[DOM] }{ $_ } || 0 } @net_list :
    map {0} @net_list;

 my $pzbt_count = $F[BIDS] >= 100 ?
    $vars_sid_sz->{pzbt_count} :
    "NA";    

 # процент бидов по sz,pz:  @{ $pz_bids{ $F[SID] }{ $F[SZ] } } / к бидам по sid,sz: $F[BIDS]
 my $explain=1;
 my @pz_bids = $F[BIDS] 
    ?
    map { 
	sprintf( "%.2f", ($_||0) / $F[BIDS] * 100 ) . ( $explain ? " pz_bids:$_, bids:$F[BIDS]" : "") 
    } @{ $pz_bids{ $F[SID] }{ $F[SZ] } }{ @pz_list } 
    :
    map {0} @pz_list;

 my @bt_bids = $F[BIDS] 
    ?
    map {
	sprintf( "%.2f", ($_||0) / $F[BIDS] * 100 ) . ( $explain ? " bt_bids:$_, bids:$F[BIDS]" : "")
    } @{ $bt_bids{ $F[SID] }{ $F[SZ] } }{ @bt_list }
    :
    map {0} @bt_list;

 my $dom_gr = $dom_gr{ $F[DOM] }||"NA";


 #    1        2        3       4      5(winbids)  6           7            8               9         10                11(posibids)       12(win_posi_bids)   
 p0 $F[SID], $F[SZ], $F[DOM], $dom_gr,   $ctr,    "NA",     $avg_session, $all_uids, $avg_winprice, $avg_exp_div_win,    "NA",               "NA",       
 
 #  13         14..17       18..63                 64..65     66..102
 $pzbt_count, @in_nets, @{$traits_sid_sz}[1..46], @pz_bids, @bt_bids;

     
    

 #>> OUT:
 #>> | field               | description  |
 #>> | ------------------- | ------------ |
 #>> | 1  sid              |
 #>> | 2  sz               | 
 #>> | 3  domain           | 
 #>> | 4  dom_gr           | доменная группа |
 #>> | 5  ctr              | клики/показы |
 #>> | 6  winbids          | процент выигранных нами бидов (просмотры/биды) (%) |
 #>> | 7  avg_session      | ср длина пользов. сессии на домене                 |
 #>> | 8  all_uids         | вего кук на сайтзоне                               |
 #>> | 9  avg_winprice     | средний winprice                                   |
 #>> | 10  avg_exp_div_win | среднее отношение expprice/winprice                |
 #>> | 11 posibids         | отношение posibids/bids - доля бидов с положит ставкой  |
 #>> | 12  win_posi_bids   | доля выигранных бидов от тех, где ставка>0              |
 #>> | 13 pzbt_count       | количество сочетаний bt-pz                              |
 #>> | 14..17 in_nets      | 4 поля признаков сетей, в кот. входит сайтзона 1/0      |
 #>> | 18..63 trait fields | 46 полей: male,female,young,adult,old,ctr1,...ctr11 (%) | 
 #>> | 64..65 pz bids      | процент бидов по pz / к бидам по sz в (%), список pz - в 00_conf.txt  |
 #>> | 66..102 bt bids     | 37 полей процент бидов по bt / к бидам по sz в (%)                    |
 
};

' "$nets" "$pz_list" "$bt_list" <(
 # ПРОСМОТРЫ за 30 дней: sid sz exposures exppr secondpr exp_div_sec
 mergef -ff="$views_ff" -m -k=1,1n -k=2,2n -stdout | summator -fu="sum,sum,sum,sum"
 # merged OUT format: sid sz exposures expprice secondprice exp_divided_by_sec
) <(
 # КЛИКИ за 30 дней ключ (sid,sz,ad,cliks) (ad - выкидываем) , суммы clicks по sid,sz:
 mergef -ff="$tn1_total_ff" -m -prefilter="cut -d* -f1,2,4" -k=1,1n -k=2,2n -stdout | summator -fu="sum"
 # Format: sid sz clicks
) <(
 # SESSIONS за 30 дней, ключ (dom), суммы по (sess_count,views):
 mergef -ff="$sessions_ff" -m -k=1,1 -stdout | summator -fu="sum,sum"
 # Format: dom, sess_counts, views
) <(
 # PZBT за 30 дней, ключ (sid, sz), конкатенируются pz"-"bt (комбинации pz,bt), подсчитывается кол-во уникальных комбинаций, out: sid,sz, кол-во комбинаций:
 mergef -ff="$pzbt_ff" -m -k=1,1n -k=2,2n -stdout | awk -F* '{print $1"*"$2"*"$3"-"$4}' | summator -fu=uniq
 # Format: sid sz cnt
) <(
 # traits30days.gz:
 zcat "$traits_fn"
 # format: 
 #>> sid * sz * all * male * fem * age1 * age2 * age3 * ctr1 * ctr2 * ctr3 * ... ctr11 * auditory01 * aud02 * aud03 * ... auditory30 * trash
 #>>  1     2    3      4     5     6      7       8     9       10     18         19        20         21      48           49          50
 
) <(
 # В каких сетях присутствует домен: dom_net за 30 дней
 # dom * net
 LANG=POSIX mergef -ff="$dom_net_ff" -k=1,1 -k=2,2n -m --stdout | uniq
 # Format: dom1*net1 (sorted)
) <(
 # pzbt: in: sid,sz,pz,bt,cnt - сортированы
 mergef -ff="$pzbt_ff" -m -prefilter="cut -d* -f1,2,3,5" -k=1,1n -k=2,2n -k=3,3n -stdout | lae -lb="sid sz pz cnt" '
  my $pz_list = shift or die "pz_list!";
  my @pz = grep {$_} split /\s+/, $pz_list or die "pz_list empty!"; 
    _{ 
	return unless grep {$_==$F[PZ]} @pz; 
	p @F[SID,SZ,PZ,CNT]
    }
 ' "$pz_list" | sort -t\* -n -k1,1 -k2,2 -k3,3 | summator -fu="sum" # хотя здеть sort в конце не нужен, но в следующем фрагменте - нужен
 # format: sid sz pz cnt
) <(
 # pzbt: in: sid,sz,pz,bt,cnt - сортированы
 mergef -ff="$pzbt_ff" -m -prefilter="cut -d* -f1,2,4,5" -k=1,1n -k=2,2n -k=3,3n -stdout | lae -lb="sid sz bt cnt" '
  my $bt_list = shift or die "bt_list!";
  my @bt = grep {$_} split /\s+/, "$bt_list" or die "bt_list empty!"; 
   _{ 
    return unless grep {$_==$F[BT]} @bt; 
    p @F[SID,SZ,BT,CNT]
   }
 ' "$bt_list" | sort -t\* -n -k1,1 -k2,2 -k3,3 | summator -fu="sum"
 # format: sid sz bt cnt
) <(
 #dom_gr.txt:
 cat $dom_gr_f
 # Format :
 # dom * group
) 




