#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper;
use Geek qw/ :all /;

my $g = Geek->new( );
my %sm = $g->named_groups(
    day => '\d\d\d\d-\d\d-\d\d',
    hour => '\d\d\d\d-\d\d-\d\dT\d\d',
    job => '\w+',
    typenum => '\d+',
);

my $res = "../RESULT/10";

$g->routes(
#    {	target "$res/$sm{day}/$sm{job}/3/url_groups_diff.gz",
#	# need - требуется иметь:
#	need {
#	    url_groups => sub{ $g->days( from=>$+{day}, shift=>1, n=>-2 )->files("$res/\%F/google/3/url_groups.gz") },
#	},
#LANG=POSIX sort -T. -t\* -m -k1,1 -k2,2 <(zcat "$prev_src" | awk -v"OFS=*" '{print $0,"prev"}') <(zcat "$src" | awk -v"OFS=*" '{print $0,"curr"}') | ./27_diff

#	perl { my $cmd = $g->qb( qq( 
#	    LANG=POSIX sort -T. -t\\* -m -k1,1 -k2,2 <\( 
#		zcat %s | awk -v"OFS=*" '{print \$0,"prev"}'
#		\) <\(
#		zcat %s | awk -v"OFS=*" '{print \$0,"curr"}'
#		\) | ./27_diff 
#	    ), @{$_{url_groups_ARRAY}});
#	    print $cmd;
#	    netflag sub { system "bash", '-c', $cmd }, flag=>$_{TARGET}, viatmp=>$_{TARGET};
#	 
#	
#	},
#    },
    {	target "$res/$sm{day}/google/3/url_groups.gz",
	# any - способ указать, что требуется хотябы один из указанного списка:
	any {
	    # here sub return code:
	    dom_grNdays => sub{  map { "$res/$+{day}/google/3/dom_gr${_}days.gz" } reverse (1..7) },
	},
	perl { warn "what to do?" },
    },
    {	target "$res/$sm{day}/google/3/dom_gr(?<N>\\d)days.gz",
	# д.б х-м!
	need {
	    dom_gr => sub{ $g->days( from=>$+{day}, shift=>1, n=>-$+{N} )->files("$res/\%F/google/3/dom_gr.txt") }
	},     
	perl { warn "what to do again?" },    
    },
    {	target "$res/$sm{day}/google/3/dom_gr.txt",
	any {
	    domsNNdays => sub{ map {"$res/$+{day}/google/3/doms${_}days.gz"} reverse (10..30) },
	},
	perl {"aa"},
    },
    {	target "$res/$sm{day}/google/3/doms(?<NN>\\d\\d)days.gz", 
	need {
	    urlsNNdays=>sub{ "$res/$+{day}/google/3/urls$+{NN}days.gz" },
	},
	perl {"oy-oy"},
    },
    {	target "$res/$sm{day}/google/3/urls(?<NN>\\d\\d)days.gz",
	need {
	    urls=>sub{ $g->days( from=>$+{day}, shift=>1, n=>-$+{NN} )->files("$res/%F/google/3/urls.gz") },
	},
	perl { print $_{day} },
    },
    {
	target "$res/$sm{day}/google/3/urls.gz",
	need {
	    total=>sub{ "$res/$+{day}/google/3/total.gz" }
	},
	perl {"sss"},
    },
    {
	target "$res/$sm{day}/google/3/total.gz",
	need {
	    hours=>sub{ $g->hours( from=>$+{day}, n=>24, shift=>4 )->files("$res/$+{day}/google/3/%FT%H.gz") }
	},
	perl {"merge"},
    },
    {
	target "$res/$sm{day}/google/3/$sm{hour}.gz",
	perl {"hist"},
    
    },
    
#    { 	target "$res/$sm{day}/google/3/sz_vars_30days.gz", 
#	need { 
#	    bids => sub{
#		# в данном случае возвращается arrayref, в котором список строк - значит это список файлов
#		$g->days( from=>$+{day}, n=>-3 )->files( "$res/\%F/google/3/bids.gz" );
#	    },
#	    total => sub{
#		$g->days( from=>$+{day}, n=>-3 )->files( "$res/\%F/google/0/total.gz" );
#	    },
#	},
#	
#	# определенные пользователем переменные - ,желательно, в нижнем регистре, предопределенные - в верхнем.
#	perl {"I return: day:$+{day}, target:$+{TARGET}, total:'$+{total}', bids:'$+{bids}'"},
#	
#	cmd => sub{
#	    sub{ print Dumper \@_ },
#	    $+{TARGET}, "'$+{total}'", "'$+{bids}'"
#	},
#
#    },
#    { 	target "$res/$sm{day}/google/3/bids.gz",
#	need {
#		total => sub{ "$res/$+{day}/google/3/total.gz" },
#	    },
#	perl { "hello $_{TARGET}" },	
#    }
    {
	target "../RESULT/TEST/$sm{day}/test.gz",
#	perl {
#	    qb( "
#	    date;
#	    date;
#	    date;
#	    ")
#	}, 
	bash { qb "echo %s", qx(date) },
    }

);

#die Dumper $g;

my @wanted = ( 
    "../RESULT/TEST/2014-10-24/test.gz", 
    #"../RESULT/10/2014-10-02/google/3/sz_vars_30days.gz"
    #"../RESULT/10/2014-11-09/google/3/url_groups.gz", 
    #"../RESULT/10/2014-11-18/google/3/url_groups_diff.gz", #"../RESULT/10/2014-11-08/google/3/url_groups_diff.gz",
    #"../RESULT/10/2014-11-09/google/3/dom_gr3days.gz",
    #"../RESULT/10/2014-10-02/google/3/total.gz",
    #"../RESULT/10/2014-10-09/google/3/dom_gr.txt",
    #"../RESULT/10/2014-10-09/google/3/doms12days.gz",
    #"../RESULT/10/2014-10-09/google/3/urls02days.gz" ,"../RESULT/10/2014-10-10/google/3/urls02days.gz",# "../RESULT/10/2014-10-09/google/3/urls.gz",
);

my @jobs = $g->match( need=>"all" ,any=>"max", deep=>4, wanted=>\@wanted  );

#die Dumper \@jobs;
$\="\n";
if (1){
 for my $job (@jobs){
    print Dumper $job;
#    print "$job->{target}:\n      ";
#    print "\tText:".$job->{job}."\n===========================";
    netflag( $job->{job}, viatmp=>"../RESULT/TEST/$job->{vars}{day}/test.gz", );
 }
}
#die Dumper $matched;





