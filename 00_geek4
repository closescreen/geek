#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper;
use lib '/home/d.belyaev/bike';
use Geek qw/ :all /;
use Getopt::Long;

my @wanted;
my $need = 'todo';
my $any = 'max';
my $deep = 4;
my $show_targets;
my $dump_jobs;
my $force;
my $deb;
my $set="";
my $first_job;
my $desc;
my $norun;

GetOptions(
    'wanted=s' => \@wanted, # list wanted files
    'need=s' => \$need, # 'todo'|'all'
    'any=s' => \$any, # 'max'|'min'
    'deep=n' => \$deep, # recursion deep
    'show_targets' => \$show_targets, # print all 'target' keys from routes 
    'dump_jobs' => \$dump_jobs,
    'force' => \$force,
    'debug' => \$deb,
    'set=s' => \$set,
    'first_job' => \$first_job,
    'desc' => \$desc, # print descriptions
    'norun' => \$norun, # not run jobs (skip they)
) or die "Bad opt!";

@wanted = split /\s+/, join " ", @wanted;

my %pn = possible_need();
$pn{ $need } or die "Not allowed need='$need'. Allowed only: ".join(", ", keys %pn );

my %pa = possible_any();
$pa{ $any } or die "Not allowed any='$any'. Allowed only:".join(", ", keys %pa);

my $g = Geek->new( );
my %sm = $g->named_groups(
    day => '\d\d\d\d-\d\d-\d\d',
    hour => '\d\d\d\d-\d\d-\d\dT\d\d',
    job => '\w+',
    tn => '\d+', # typenum
);

my $res = "../RESULT/10";

$g->routes(
    {	target "$res/$sm{day}/$sm{job}/$sm{tn}/sz_vars_30days.gz",
	desc {"кластеризация $_{day}/$_{job}/$sm{tn}"},
	need {
	    bids => sub{ days(from=>$+{day}, n=>-30, shift=>1 )->files("$res/\%F/$+{job}/$+{tn}/bids.gz") },
	    views => sub{ days(from=>$+{day}, n=>-30, shift=>1 )->files("$res/\%F/$+{job}/$+{tn}/views.gz") },
	    tn1_totals => sub{ days(from=>$+{day}, n=>-30, shift=>1 )->files("$res/\%F/$+{job}/1/total.gz") },
	    sessions => sub{ days(from=>$+{day}, n=>-30, shift=>1 )->files("$res/\%F/$+{job}/$+{tn}/sessions.gz") },
	    pzbt => sub{ days(from=>$+{day}, n=>-30, shift=>1 )->files("$res/\%F/$+{job}/$+{tn}/pzbt.gz") },
	    traits30days => sub{ "$res/$+{day}/$+{job}/$+{tn}/traits30days.gz" },
	    dom_net => sub{ days(from=>$+{day}, n=>-30, shift=>1 )->files("$res/%F/net_sites/0/dom_net.gz") }, # dom_net всегда - из net_sites/0
	    dom_gr =>sub{ "$res/$+{day}/$+{job}/$+{tn}/dom_gr.txt" },
	},
	cmd => sub{ "nothing"},
    },
    { 	target "$res/$sm{day}/$sm{job}/$sm{tn}/bids.gz",
	need {
	    total => sub{ "$res/$+{day}/$+{job}/$+{tn}/total.gz" },
	    },
	perl { "hello $_{TARGET}" },	
    },
    {	target "$res/$sm{day}/$sm{job}/0/views.gz",
	need {
	    total => sub{ "$res/$+{day}/$+{job}/0/total.gz" },
	},
	cmd => sub{ "nothing"},
    },
    {	target "$res/$sm{day}/$sm{job}/1/total.gz",
	need {
	    total => sub{ "$res/$+{day}/$+{job}/0/total.gz" },
	},
	cmd => sub{ "nothing"},
    },    

#-----------URLS----------
    {	target "$res/$sm{day}/$sm{job}/$sm{tn}/url_groups_diff.gz",
	# need - требуется иметь:
	need {
	    url_groups => sub{ days( from=>$+{day}, shift=>1, n=>-2 )->files("$res/\%F/$+{job}/$+{tn}/url_groups.gz") },
	},
#LANG=POSIX sort -T. -t\* -m -k1,1 -k2,2 <(zcat "$prev_src" | awk -v"OFS=*" '{print $0,"prev"}') <(zcat "$src" | awk -v"OFS=*" '{print $0,"curr"}') | ./27_diff

	bash { qb( qq( 
	    LANG=POSIX sort -T. -t\\* -m -k1,1 -k2,2 <\( 
		zcat %s | awk -v"OFS=*" '{print \$0,"prev"}'
		\) <\(
		zcat %s | awk -v"OFS=*" '{print \$0,"curr"}'
		\) | ./27_diff 
	    ), @{$_{url_groups_ARRAY}});
	    #print $cmd;
	    #netflag sub { system "bash", '-c', $cmd }, flag=>$_{TARGET}, viatmp=>$_{TARGET};
	},
    },
    {	target "$res/$sm{day}/$sm{job}/$sm{tn}/url_groups.gz",
	# any - способ указать, что требуется хотябы один из указанного списка:
	any {
	    # here sub return code:
	    dom_grNdays => sub{  map { "$res/$+{day}/$+{job}/$+{tn}/dom_gr${_}days.gz" } reverse (1..7) },
	},
	perl { warn "what to do?" },
    },
    {	target "$res/$sm{day}/$sm{job}/$sm{tn}/dom_gr(?<N>\\d)days.gz",
	# д.б х-м!
	need {
	    dom_gr => sub{ $g->days( from=>$+{day}, shift=>1, n=>-$+{N} )->files("$res/\%F/$+{job}/$+{tn}/dom_gr.txt") }
	},     
	perl { warn "what to do again?" },    
    },
    {	target "$res/$sm{day}/$sm{job}/$sm{tn}/dom_gr.txt",
	any {
	    domsNNdays => sub{ map {"$res/$+{day}/$+{job}/$+{tn}/doms${_}days.gz"} reverse (10..30) },
	},
	perl {"aa"},
    },
    {	target "$res/$sm{day}/$sm{job}/$sm{tn}/doms(?<NN>\\d\\d)days.gz", 
	need {
	    urlsNNdays=>sub{ "$res/$+{day}/$+{job}/$+{tn}/urls$+{NN}days.gz" },
	},
	perl {"oy-oy"},
    },
    {	target "$res/$sm{day}/$sm{job}/$sm{tn}/urls(?<NN>\\d\\d)days.gz",
	need {
	    urls=>sub{ $g->days( from=>$+{day}, shift=>1, n=>-$+{NN} )->files("$res/%F/$+{job}/$+{tn}/urls.gz") },
	},
	perl { print $_{day} },
    },
    {
	target "$res/$sm{day}/$sm{job}/$sm{tn}/urls.gz",
	need {
	    total=>sub{ "$res/$+{day}/$+{job}/$+{tn}/total.gz" }
	},
	perl {"sss"},
    },
    {
	target "$res/$sm{day}/$sm{job}/$sm{tn}/total.gz",
	need {
	    hours=>sub{ $g->hours( from=>$+{day}, n=>24, shift=>4 )->files("$res/$+{day}/$+{job}/$+{tn}/%FT%H.gz") }
	},
	perl {"merge"},
    },
    {
	target "$res/$sm{day}/$sm{job}/$sm{tn}/$sm{hour}.gz",
	perl {"hist"},
    
    },
    
    {
	target "../RESULT/TEST/$sm{day}/test.gz",
	desc {"тестовый файл $_{day}"},
	bash { qb "sleep 10; echo $_{day} %s", qx(date) },
#	cmc => sub{},
    }

);

if ($show_targets){
    local ($\,$,)=("\n","\n");
    print "Targets:", map {$_->{target}} $g->routes() and exit 0;
}


$\="\n";
my @jobs = $g->match( need=>$need ,any=>$any, deep=>$deep, wanted=>\@wanted );
if ( $dump_jobs ){	warn Dumper \@jobs and exit 0  }	
if ( !@jobs and $deb ){ warn "---End of jobs---" and last }
my @jobs_to_do = $first_job ? $jobs[0] : @jobs;
for my $job ( @jobs_to_do ){
    my $file_exists = $g->test( $job->{target} ) ? "v" : "-";
    print $job->{desc} ? $job->{desc} : "(without description)", " ($file_exists)";
    next if $norun;
    my ($rv, $msg) = netflag( 
	$job->{job}, 
	viatmp=>$job->{target}, 
	force=>$force, 
	deb=>$deb, 
	set=>$set, 
#	stdall=>"../RESULT/TEST/$job->{vars}{day}/test.log",
    );
    warn "Return value: $rv, msg=$msg" if $deb;
}    
    





